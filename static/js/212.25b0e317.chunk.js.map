{"version":3,"file":"static/js/212.25b0e317.chunk.js","mappings":"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","sources":["main-features/user/components/sign-in/sign-in.tsx","main-features/user/validation/validation-signin.ts"],"sourcesContent":["import React  from 'react';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport Paper from '@mui/material/Paper';\r\nimport Box from '@mui/material/Box';\r\nimport Grid from '@mui/material/Grid';\r\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\r\nimport Typography from '@mui/material/Typography';\r\nimport {Link, useNavigate} from 'react-router-dom';\r\nimport Fab from '@mui/material/Fab/Fab';\r\nimport FacebookIcon from '@mui/icons-material/Facebook';\r\nimport GoogleIcon from '@mui/icons-material/Google';\r\nimport FacebookLogin from 'react-facebook-login';\r\nimport { useFormik } from 'formik';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport FormControl from '@mui/material/FormControl/FormControl';\r\nimport InputLabel from '@mui/material/InputLabel/InputLabel';\r\nimport OutlinedInput from '@mui/material/OutlinedInput/OutlinedInput';\r\nimport FormHelperText from '@mui/material/FormHelperText/FormHelperText';\r\nimport InputAdornment from '@mui/material/InputAdornment/InputAdornment';\r\nimport IconButton from '@mui/material/IconButton/IconButton';\r\nimport Visibility from '@mui/icons-material/Visibility';\r\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\r\n\r\nimport Breadcrumbs from '@mui/material/Breadcrumbs/Breadcrumbs';\r\nimport Slide from '@mui/material/Slide';\r\nimport LoadingButton from '@mui/lab/LoadingButton/LoadingButton';\r\nimport Container from \"@mui/material/Container/Container\";\r\nimport { GoogleLogin } from 'react-google-login';\r\nimport {useTranslation} from \"react-i18next\";\r\nimport {allLocaleSelector, allLoginSelector, allSessionSelector, connectedUserWS, loginWithFacebook, loginWithGoogle} from \"../../store/slice\";\r\nimport {initialValuesSignIn, validationSchemaSignIn} from \"../../validation/validation-signin\";\r\nimport {IFacebook, IGooglePlus} from \"../../../../shared/model/user.model\";\r\nimport {SourceProvider} from \"../../../../shared/enums/source-provider\";\r\nimport {ALL_APP_ROUTES} from \"../../../../core/config/all-app-routes\";\r\nimport {AllAppConfig} from \"../../../../core/config/all-config\";\r\nimport {loginUser, sessionUser, getNumberOfNotificationsNotSee, getNumberOfMessagesNotSee} from '../../store/slice';\r\nimport './sign-in.scss';\r\nimport Stack from \"@mui/material/Stack\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\n\r\nconst initialValues = initialValuesSignIn;\r\n\r\n// export interface ISignInProps extends StateProps, DispatchProps {}\r\n\r\nexport default function SignIn (){\r\n    const [startAnimation, setStartAnimation] = React.useState(false);\r\n    const [showPassword, setShowPassword] = React.useState({\r\n        showPassword: false,\r\n    });\r\n    const { t } = useTranslation();\r\n    const dispatch = useDispatch();\r\n    const {loading, token} = useSelector(allLoginSelector);\r\n    const {currentLocale} = useSelector(allLocaleSelector);\r\n    const {currentUser, oneSignalId} = useSelector(allSessionSelector);\r\n\r\n    const handleClickShowPassword = () => {\r\n        setShowPassword({\r\n            showPassword: !showPassword.showPassword,\r\n        });\r\n    };\r\n\r\n    const handleMouseDownPassword = (event: any) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        setStartAnimation(true);\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        if (token) {\r\n            dispatch(sessionUser({}));\r\n            dispatch(getNumberOfNotificationsNotSee({}));\r\n            dispatch(getNumberOfMessagesNotSee({}));\r\n        }\r\n    }, [token]);\r\n\r\n    const formik = useFormik({\r\n        initialValues,\r\n        validationSchema: validationSchemaSignIn,\r\n        onSubmit: values => {\r\n            dispatch(loginUser({\r\n                email: values.email.toString(),\r\n                password: values.password.toString(),\r\n                oneSignalId: oneSignalId,\r\n                rememberMe: true\r\n            }));\r\n        },\r\n    });\r\n\r\n    const responseFacebook = (response: any) => {\r\n        if(!response.status){\r\n            const requestData: IFacebook = {\r\n                ...response,\r\n                sourceProvider: SourceProvider.FACEBOOK,\r\n                idOneSignal: oneSignalId,\r\n                langKey: currentLocale\r\n            };\r\n            dispatch(loginWithFacebook({...requestData}));\r\n            // loginFacebook(requestData);\r\n        }\r\n    };\r\n\r\n    const responseGoogle = (response: any) => {\r\n        if (!response.error) {\r\n            const requestData: IGooglePlus = {\r\n                ...response,\r\n                sourceProvider: SourceProvider.GOOGLE_PLUS,\r\n                idOneSignal: 'oneSignalId',\r\n                langKey: currentLocale\r\n            };\r\n            dispatch(loginWithGoogle({...requestData}));\r\n            // loginGooglePlus(requestData);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Slide direction=\"up\" in={startAnimation} mountOnEnter unmountOnExit>\r\n            <Container maxWidth=\"xl\">\r\n                <Grid\r\n                    container\r\n                    style={{\r\n                        paddingTop: 10,\r\n                    }}\r\n                >\r\n                    <Grid item sm={4}></Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <Breadcrumbs aria-label=\"breadcrumb\">\r\n                            <Link color=\"inherit\" to={ALL_APP_ROUTES.HOME}>\r\n                                SRF\r\n                            </Link>\r\n                            <Typography color=\"text.primary\">\r\n                                {t<string>('signin.title_page_signin')}\r\n                            </Typography>\r\n                        </Breadcrumbs>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container sx={{pt: 5, pb: 5}}>\r\n                    <Grid item xs={4}></Grid>\r\n\r\n                    <Grid item xs={12} sm={8} md={4} component={Paper} md-offset={3} elevation={6} square>\r\n                        <Box\r\n                            sx={{\r\n                                my: 4,\r\n                                mx: 4,\r\n                                display: 'flex',\r\n                                flexDirection: 'column',\r\n                                alignItems: 'center',\r\n                            }}\r\n                        >\r\n                            <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\r\n                                <LockOutlinedIcon />\r\n                            </Avatar>\r\n                            <Typography component=\"h1\" variant=\"h5\">\r\n                                {t<string>('signin.title_page_signin')}\r\n                            </Typography>\r\n\r\n                            <Box sx={{ mt: 1, pb: 2 }}>\r\n                                <form onSubmit={formik.handleSubmit} data-testid=\"login-form\">\r\n                                    <Grid container spacing={2}>\r\n                                        <Grid item xs={12}>\r\n                                            <FormControl fullWidth error={formik.touched.email && Boolean(formik.errors.email)}>\r\n                                                <InputLabel htmlFor=\"outlined-adornment-title\">{t<string>('common.label_email')}</InputLabel>\r\n                                                <OutlinedInput\r\n                                                    id=\"email\"\r\n                                                    name=\"email\"\r\n                                                    type=\"email\"\r\n                                                    label={t<string>('common.label_email')}\r\n                                                    value={formik.values.email}\r\n                                                    onChange={formik.handleChange}\r\n                                                    inputProps={{\r\n                                                        'data-testid': 'email'\r\n                                                    }}\r\n                                                />\r\n                                                <FormHelperText id=\"component-helper-text\">{formik.touched.email && formik.errors.email}</FormHelperText>\r\n                                            </FormControl>\r\n                                        </Grid>\r\n                                        <Grid item xs={12}>\r\n                                            <FormControl fullWidth error={formik.touched.password && Boolean(formik.errors.password)}>\r\n                                                <InputLabel htmlFor=\"outlined-adornment-title\">{t<string>('common.label_password')}</InputLabel>\r\n                                                <OutlinedInput\r\n                                                    id=\"password\"\r\n                                                    name=\"password\"\r\n                                                    type={showPassword.showPassword ? 'text' : 'password'}\r\n                                                    label={t<string>('common.label_password')}\r\n                                                    value={formik.values.password}\r\n                                                    onChange={formik.handleChange}\r\n                                                    inputProps={{\r\n                                                        'data-testid': 'password'\r\n                                                    }}\r\n                                                    endAdornment={\r\n                                                        <InputAdornment position=\"end\">\r\n                                                            <IconButton\r\n                                                                aria-label=\"toggle password visibility\"\r\n                                                                onClick={handleClickShowPassword}\r\n                                                                onMouseDown={handleMouseDownPassword}\r\n                                                                edge=\"end\"\r\n                                                            >\r\n                                                                {showPassword.showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                                            </IconButton>\r\n                                                        </InputAdornment>\r\n                                                    }\r\n                                                />\r\n                                                <FormHelperText id=\"component-helper-text\">{formik.touched.password && formik.errors.password}</FormHelperText>\r\n                                            </FormControl>\r\n                                        </Grid>\r\n                                    </Grid>\r\n\r\n                                    <FormControlLabel control={<Checkbox value=\"remember\" color=\"primary\" />} label={t('signin.label_remember_me').toString()} />\r\n\r\n                                    <LoadingButton loading={loading}\r\n                                                   fullWidth\r\n                                                   variant=\"contained\"\r\n                                                   color=\"neutral\"\r\n                                                   type=\"submit\"\r\n                                                   data-testid='submit'\r\n                                                   sx={{ mt: 3, mb: 2 }}>\r\n                                        {t<string>('signin.label_login')}\r\n                                    </LoadingButton>\r\n                                </form>\r\n                                <Grid container>\r\n                                    <Grid item>\r\n                                        <Typography variant=\"subtitle2\" component=\"p\" sx={{ mt: 2 }}>\r\n                                            <Link to={ALL_APP_ROUTES.FORGOT_PASSWORD_INIT}>\r\n                                                {t<string>('signin.label_forgot_password')}\r\n                                            </Link>\r\n                                        </Typography>\r\n\r\n                                        <Typography variant=\"subtitle2\" component=\"p\" sx={{ mt: 2 }}>\r\n                                            <Link to={ALL_APP_ROUTES.REGISTER}>\r\n                                                {t<string>('signin.label_register_account')}\r\n                                            </Link>\r\n                                        </Typography>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Box>\r\n                        </Box>\r\n\r\n                        <Stack spacing={2} direction=\"row\" sx={{ justifyContent: 'center', my: 4 }}>\r\n                            <FacebookLogin\r\n                                appId=\"sqd\"\r\n                                autoLoad={false}\r\n                                fields=\"name,email,picture\"\r\n                                textButton=\"\"\r\n                                icon={\r\n                                    <FacebookIcon />\r\n                                }\r\n                                callback={responseFacebook}\r\n                            ></FacebookLogin>\r\n                            <GoogleLogin\r\n                                clientId={AllAppConfig.CLIENT_ID_GOOGLLE}\r\n                                onSuccess={responseGoogle}\r\n                                onFailure={responseGoogle}\r\n                                autoLoad={false}\r\n                                render={renderProps => (\r\n                                    <Fab\r\n                                        color=\"secondary\"\r\n                                        aria-label=\"google\"\r\n                                        sx={{ m: 1, backgroundColor: '#E93F2E' }}\r\n                                        onClick={renderProps.onClick}\r\n                                        disabled={renderProps.disabled}\r\n                                    >\r\n                                        <GoogleIcon />\r\n                                    </Fab>\r\n                                )}\r\n                            ></GoogleLogin>\r\n                        </Stack>\r\n\r\n                    </Grid>\r\n                    <Grid item xs={4}></Grid>\r\n                </Grid>\r\n            </Container>\r\n        </Slide>\r\n    );\r\n}\r\n\r\n// const mapStateToProps = ({user, locale}: IRootState) => ({\r\n//     loading: user.loginLoading,\r\n//     isAuthenticated: user.isAuthenticated,\r\n//     currentUser: user.currentUser,\r\n//     loginSuccess: user.loginSuccess,\r\n//     oneSignalId: user.oneSignalId,\r\n//     currentLocale: locale.currentLocale\r\n// });\r\n//\r\n// const mapDispatchToProps = {\r\n//     login,\r\n//     loginGooglePlus,\r\n//     loginFacebook\r\n// };\r\n//\r\n// type StateProps = ReturnType<typeof mapStateToProps>;\r\n// type DispatchProps = typeof mapDispatchToProps;\r\n//\r\n// export default connect(mapStateToProps, mapDispatchToProps)(SignIn);\r\n","import * as Yup from 'yup';\r\n\r\nexport const initialValuesSignIn = {\r\n  email: '',\r\n  password: '',\r\n};\r\n\r\nexport const validationSchemaSignIn = Yup.object({\r\n  email: Yup.string().email().required('Email is required'),\r\n  password: Yup.string().required('Password is required').min(5, 'Min 5 digits').max(200, 'Max 200 digits'),\r\n});\r\n\r\nexport const initialValuesForgotPassword = {\r\n    email: '',\r\n};\r\n\r\nexport const validationSchemaForgotPassword = Yup.object({\r\n    email: Yup.string().email().required('Email is required'),\r\n});\r\n\r\n\r\nexport const initialValuesForgotPasswordFinish = {\r\n    password: '',\r\n    confPassword: '',\r\n};\r\n\r\nexport const validationSchemaForgotPasswordFinish = Yup.object({\r\n    password: Yup.string().required('Password is required').min(5, 'Min 5 digits').max(200, 'Max 200 digits'),\r\n    confPassword: Yup.string()\r\n        .required('Password is required')\r\n        .oneOf([Yup.ref('password'), null], 'Passwords must match')\r\n        .min(5, 'Muin 5 digits')\r\n        .max(200, 'Max 5 digits'),\r\n});"],"names":["initialValues","initialValuesSignIn","SignIn","React","startAnimation","setStartAnimation","showPassword","setShowPassword","t","useTranslation","dispatch","useDispatch","useSelector","allLoginSelector","loading","token","currentLocale","allLocaleSelector","allSessionSelector","oneSignalId","currentUser","sessionUser","getNumberOfNotificationsNotSee","getNumberOfMessagesNotSee","formik","useFormik","validationSchema","validationSchemaSignIn","onSubmit","values","loginUser","email","toString","password","rememberMe","responseGoogle","response","error","requestData","sourceProvider","SourceProvider","idOneSignal","langKey","loginWithGoogle","Slide","direction","in","mountOnEnter","unmountOnExit","Container","maxWidth","Grid","container","style","paddingTop","item","sm","xs","Breadcrumbs","color","to","ALL_APP_ROUTES","Typography","sx","pt","pb","md","component","Paper","elevation","square","Box","my","mx","display","flexDirection","alignItems","Avatar","m","bgcolor","LockOutlined","variant","mt","handleSubmit","spacing","FormControl","fullWidth","touched","Boolean","errors","InputLabel","htmlFor","OutlinedInput","id","name","type","label","value","onChange","handleChange","inputProps","FormHelperText","endAdornment","InputAdornment","position","IconButton","onClick","onMouseDown","event","preventDefault","edge","VisibilityOff","Visibility","FormControlLabel","control","Checkbox","LoadingButton","mb","Stack","justifyContent","appId","autoLoad","fields","textButton","icon","Facebook","callback","status","loginWithFacebook","GoogleLogin","clientId","AllAppConfig","onSuccess","onFailure","render","renderProps","Fab","backgroundColor","disabled","Google","Yup","required","min","max","initialValuesForgotPassword","validationSchemaForgotPassword","confPassword","oneOf"],"sourceRoot":""}