{"version":3,"file":"static/js/526.203c9a8b.chunk.js","mappings":"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","sources":["main-features/chat/ui-segments/ConversationLoading.tsx","main-features/chat/ui-segments/Conversation.tsx","main-features/chat/validation/initial-values-message.ts","main-features/chat/ui-segments/MessageConversation.tsx","main-features/chat/Chat.tsx","shared/pages/react-time-ago.tsx","shared/pages/styled-badge.tsx","shared/pages/transition-modal.tsx","../node_modules/@mui/icons-material/ArrowBackIos.js","../node_modules/@mui/icons-material/Delete.js","../node_modules/@mui/icons-material/EmojiEmotions.js","../node_modules/@mui/icons-material/Send.js","../node_modules/@mui/material/Container/containerClasses.js","../node_modules/@mui/material/Container/Container.js","../node_modules/@mui/material/styles/cssUtils.js","../node_modules/@mui/material/Skeleton/skeletonClasses.js","../node_modules/@mui/material/Skeleton/Skeleton.js","../node_modules/lodash/isEmpty.js"],"sourcesContent":["import React from 'react';\r\nimport List from '@mui/material/List';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\r\nimport ListItemButton from '@mui/material/ListItemButton/ListItemButton';\r\nimport Skeleton from '@mui/material/Skeleton/Skeleton';\r\n\r\n\r\nexport function ConversationLoading() {\r\n    return (\r\n        <List sx={{ width: '100%', bgcolor: 'background.paper' }}>\r\n            {\r\n                [0, 1, 2].map((key) => (\r\n                    <ListItemButton alignItems=\"flex-start\" key={`key-${key}`}>\r\n                        <ListItemAvatar>\r\n                            <Skeleton variant=\"circular\" width={40} height={40} />\r\n                        </ListItemAvatar>\r\n                        <ListItemText primary={<Skeleton variant=\"text\" />} secondary={<Skeleton variant=\"text\" />} />\r\n                    </ListItemButton>\r\n                ))\r\n            }\r\n        </List>\r\n    );\r\n}","import React from 'react';\r\nimport Box from \"@mui/material/Box/Box\";\r\nimport {IConversationMessage} from \"../../../shared/model/conversation-message.model\";\r\nimport {IUser} from \"../../../shared/model/user.model\";\r\nimport Paper from \"@mui/material/Paper/Paper\";\r\nimport IconButton from \"@mui/material/IconButton/IconButton\";\r\nimport InputBase from \"@mui/material/InputBase/InputBase\";\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport {ConversationLoading} from \"./ConversationLoading\";\r\nimport List from \"@mui/material/List/List\";\r\nimport ListItemButton from \"@mui/material/ListItemButton/ListItemButton\";\r\nimport ListItemAvatar from \"@mui/material/ListItemAvatar/ListItemAvatar\";\r\nimport Avatar from \"@mui/material/Avatar/Avatar\";\r\nimport ListItemText from \"@mui/material/ListItemText/ListItemText\";\r\nimport {getFullnameUser, getUserAvatar} from \"../../../shared/utils/utils-functions\";\r\nimport Typography from \"@mui/material/Typography/Typography\";\r\nimport Divider from \"@mui/material/Divider/Divider\";\r\nimport Alert from \"@mui/material/Alert/Alert\";\r\nimport {IConversation} from \"../../../shared/model/conversation.model\";\r\nimport {ConvertReactTimeAgo} from \"../../../shared/pages/react-time-ago\";\r\nimport {StyledBadge} from \"../../../shared/pages/styled-badge\";\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport ListItem from \"@mui/material/ListItem/ListItem\";\r\nimport {TransitionModal} from \"../../../shared/pages/transition-modal\";\r\nimport Dialog from \"@mui/material/Dialog/Dialog\";\r\nimport DialogTitle from \"@mui/material/DialogTitle/DialogTitle\";\r\nimport DialogContent from \"@mui/material/DialogContent/DialogContent\";\r\nimport DialogContentText from \"@mui/material/DialogContentText/DialogContentText\";\r\nimport DialogActions from \"@mui/material/DialogActions/DialogActions\";\r\nimport Button from \"@mui/material/Button/Button\";\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\n\r\nexport function Conversation({ loading, list, account, listMessages, isOnLine, deleteConversation }:\r\n                                 { loading: boolean, list: IConversationMessage[], account: IUser, listMessages: any, isOnLine: Function, deleteConversation: any }) {\r\n\r\n    const [openDeleteConvModal, setOpenDeleteConvModal] = React.useState(false);\r\n    const [conversationDel, setConversationDel] = React.useState<IConversation | undefined>(undefined);\r\n    const { t } = useTranslation();\r\n\r\n    const getAvatar = (conversatioinMessage: IConversationMessage) => {\r\n        if (conversatioinMessage?.conversation?.senderUser?.id === account.id) {\r\n            return getUserAvatar(\r\n                conversatioinMessage?.conversation?.receiverUser?.id,\r\n                conversatioinMessage?.conversation?.receiverUser?.imageUrl,\r\n                conversatioinMessage?.conversation?.receiverUser?.sourceRegister\r\n            );\r\n        } else {\r\n            return getUserAvatar(\r\n                conversatioinMessage?.conversation?.senderUser?.id,\r\n                conversatioinMessage?.conversation?.senderUser?.imageUrl,\r\n                conversatioinMessage?.conversation?.senderUser?.sourceRegister\r\n            );\r\n        }\r\n    };\r\n\r\n    const isUserOnLine  = (conversatioinMessage: IConversationMessage) => {\r\n        if (conversatioinMessage?.conversation?.senderUser?.id === account.id) {\r\n            return isOnLine(conversatioinMessage?.conversation?.receiverUser?.email);\r\n        } else {\r\n            return isOnLine(conversatioinMessage?.conversation?.senderUser?.email);\r\n        }\r\n    };\r\n\r\n    const getFullname = (conversatioinMessage: IConversationMessage) => {\r\n        if (conversatioinMessage?.conversation?.senderUser?.id === account.id) {\r\n            return getFullnameUser(conversatioinMessage?.conversation?.receiverUser);\r\n        } else {\r\n            return getFullnameUser(conversatioinMessage?.conversation?.senderUser);\r\n        }\r\n    };\r\n\r\n    const openListMessages = (conversation?: IConversation) => {\r\n        listMessages(conversation);\r\n    }\r\n\r\n    const deleteConv = (event: any, conversation?: IConversation) => {\r\n        event.stopPropagation();\r\n        setOpenDeleteConvModal(true);\r\n        setConversationDel(conversation);\r\n\r\n    }\r\n\r\n    const handleCloseDeleteConvModal = () => {\r\n        setOpenDeleteConvModal(false);\r\n    }\r\n\r\n    const handleDeleteConvModal = () => {\r\n        setOpenDeleteConvModal(false);\r\n        deleteConversation(conversationDel);\r\n    }\r\n\r\n    const renderDialogFavoriteUser = () => {\r\n        return (\r\n            <Dialog\r\n                open={openDeleteConvModal}\r\n                TransitionComponent={TransitionModal}\r\n                keepMounted\r\n                onClose={handleCloseDeleteConvModal}\r\n                aria-describedby=\"alert-dialog-slide-description\"\r\n            >\r\n                <DialogTitle>\r\n                    {t('chat.title_delete_conversation')}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description\">\r\n                        {t('chat.description_delete_conversation')}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleCloseDeleteConvModal} color=\"neutral\">\r\n                        {t('common.label_cancel')}\r\n                    </Button>\r\n                    <Button onClick={handleDeleteConvModal} color=\"success\">\r\n                        {t('common.label_delete')}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        );\r\n    };\r\n\r\n    return(\r\n        <Box>\r\n            <Paper component=\"form\" sx={{ p: '2px 4px', display: 'flex', alignItems: 'center' }}>\r\n                <IconButton sx={{ p: '10px' }} aria-label=\"menu\">\r\n                    <MenuIcon />\r\n                </IconButton>\r\n                <InputBase sx={{ ml: 1, flex: 1 }} placeholder=\"Search ..\" inputProps={{ 'aria-label': 'search conversation' }} />\r\n                <IconButton type=\"submit\" sx={{ p: '10px' }} aria-label=\"search\">\r\n                    <SearchIcon />\r\n                </IconButton>\r\n            </Paper>\r\n            <br />\r\n\r\n            {loading ? (\r\n                <ConversationLoading />\r\n            ) : (\r\n                <List sx={{ width: '100%', bgcolor: 'background.paper' }}>\r\n                    {list.map((conversatioinMessage: IConversationMessage, index: number) => (\r\n                        <Box key={`conversation-${index}`}>\r\n                            <ListItem button\r\n                                alignItems=\"flex-start\"\r\n                                onClick={() => openListMessages(conversatioinMessage.conversation)}\r\n                                secondaryAction={\r\n                                    <IconButton edge=\"end\" aria-label=\"delete\" onClick={(event: any) => deleteConv(event, conversatioinMessage.conversation)}>\r\n                                        <DeleteIcon color=\"error\"/>\r\n                                    </IconButton>\r\n                                }>\r\n                                <ListItemAvatar>\r\n                                    <StyledBadge\r\n                                        overlap=\"circular\"\r\n                                        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n                                        variant=\"dot\"\r\n                                        color={isUserOnLine(conversatioinMessage) ? 'success' : 'error'}>\r\n                                        <Avatar alt=\"User avatar\" src={getAvatar(conversatioinMessage)} ></Avatar>\r\n                                    </StyledBadge>\r\n                                </ListItemAvatar>\r\n                                <ListItemText\r\n                                    className=\"item-conversation-infos\"\r\n                                    primary={getFullname(conversatioinMessage)}\r\n                                    secondary={\r\n                                        <React.Fragment>\r\n                                            <Typography sx={{ display: 'inline' }} component=\"span\" variant=\"body2\" color=\"text.primary\">\r\n                                                <ConvertReactTimeAgo convertDate={conversatioinMessage?.conversation?.dateCreated} />\r\n                                            </Typography>\r\n                                            {` — ${conversatioinMessage?.message?.content}`}\r\n                                        </React.Fragment>\r\n                                    }\r\n                                />\r\n                            </ListItem>\r\n                            <Divider variant=\"inset\" component=\"li\" />\r\n                        </Box>\r\n                    ))}\r\n\r\n                    <ListItemButton alignItems=\"flex-start\">\r\n                        {!loading && list.length === 0 ? (\r\n                            <Alert severity=\"warning\">No Conversations found</Alert>\r\n                        ) : null}\r\n                    </ListItemButton>\r\n                </List>\r\n            )}\r\n            <div>{renderDialogFavoriteUser()}</div>\r\n        </Box>\r\n    );\r\n}","import * as Yup from 'yup';\r\n\r\nexport const initialValuesMessage = {\r\n    content: '',\r\n};\r\n\r\nexport const validationSchemaMessage = Yup.object({\r\n    content: Yup.string().required('Message is required'),\r\n});\r\n","import React  from 'react';\r\nimport './MessageStyle.scss';\r\nimport Box from \"@mui/material/Box/Box\";\r\nimport AppBar from \"@mui/material/AppBar/AppBar\";\r\nimport Toolbar from \"@mui/material/Toolbar/Toolbar\";\r\nimport IconButton from \"@mui/material/IconButton/IconButton\";\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport EmojiEmotionsIcon from '@mui/icons-material/EmojiEmotions';\r\nimport TextField from \"@mui/material/TextField/TextField\";\r\nimport FormControl from \"@mui/material/FormControl/FormControl\";\r\nimport {useFormik} from \"formik\";\r\nimport {initialValuesMessage, validationSchemaMessage} from \"../validation/initial-values-message\";\r\nimport FormHelperText from \"@mui/material/FormHelperText/FormHelperText\";\r\nimport {IMessage} from \"../../../shared/model/message.model\";\r\nimport CircularProgress from \"@mui/material/CircularProgress/CircularProgress\";\r\nimport {IConversation} from \"../../../shared/model/conversation.model\";\r\nimport {IUser} from \"../../../shared/model/user.model\";\r\nimport {convertDateTimeToServer, getFullnameUser, getUserAvatar} from \"../../../shared/utils/utils-functions\";\r\nimport {ConvertReactTimeAgo} from \"../../../shared/pages/react-time-ago\";\r\nimport LoadingButton from \"@mui/lab/LoadingButton/LoadingButton\";\r\nimport Button from \"@mui/material/Button/Button\";\r\nimport List from \"@mui/material/List/List\";\r\nimport ListItem from \"@mui/material/ListItem/ListItem\";\r\nimport ListItemAvatar from \"@mui/material/ListItemAvatar/ListItemAvatar\";\r\nimport Avatar from \"@mui/material/Avatar/Avatar\";\r\nimport ListItemText from \"@mui/material/ListItemText/ListItemText\";\r\nimport ArrowBackIosIcon from '@mui/icons-material/ArrowBackIos';\r\nimport {getStompClient} from \"../../../core/config/websocket-middleware\";\r\nimport {ALL_APP_ROUTES} from \"../../../core/config/all-app-routes\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nconst initialValues = initialValuesMessage;\r\n\r\nexport function MessageConversation({account, conversation, callbackAddMessage, loadingListMessages, listMessages, loadingAddMessage, totalPagesMessages, activePage, callbackLoadMoreMessages, calbackBackToConversations}:\r\n                                    {account: any, conversation: IConversation, callbackAddMessage: any, loadingListMessages: boolean, listMessages: IMessage[],\r\n                                        loadingAddMessage: boolean, totalPagesMessages: number, activePage: number, callbackLoadMoreMessages: any, calbackBackToConversations: any}) {\r\n\r\n    const [listCurrentMessages, setListCurrentMessages] = React.useState<IMessage[]>([]);\r\n    const [newMessage, setNewMessage] = React.useState<any>(null);\r\n    const messagesEndRef = React.useRef<any>();\r\n    const navigate = useNavigate();\r\n\r\n    const formik = useFormik({\r\n        initialValues,\r\n        validationSchema: validationSchemaMessage,\r\n        onSubmit: values => {\r\n            const entity: IMessage = {\r\n                content: values.content,\r\n                dateCreated: convertDateTimeToServer(new Date()),\r\n                isRead: false,\r\n                senderUser: {\r\n                    id: account.id,\r\n                    email: account.email,\r\n                    imageUrl: account.imageUrl,\r\n                    sourceRegister: account.sourceRegister\r\n                },\r\n                receiverUser: {\r\n                    id: getReceiverUser()?.id,\r\n                    email: getReceiverUser()?.email,\r\n                    imageUrl: getReceiverUser()?.imageUrl,\r\n                    sourceRegister: getReceiverUser()?.sourceRegister\r\n                },\r\n                conversation: {\r\n                    id: conversation.id\r\n                }\r\n            }\r\n\r\n            // Whene me send a message\r\n            setListCurrentMessages([\r\n                ...listCurrentMessages,\r\n                entity\r\n            ]);\r\n\r\n            getStompClient()?.send(\r\n                '/topic/sendChatMessages', // destination\r\n                JSON.stringify(entity), // body\r\n                {} // header\r\n            );\r\n            callbackAddMessage(entity);\r\n            formik.resetForm();\r\n\r\n            setTimeout(() => {\r\n                messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" })\r\n            }, 300)\r\n        },\r\n    });\r\n\r\n    React.useEffect(() => {\r\n        subscribeChatMessages();\r\n    }, [])\r\n\r\n    const getReceiverUser = (): IUser | null | undefined => {\r\n        if(conversation?.senderUser?.id ===account.id){\r\n            return conversation?.receiverUser;\r\n        }\r\n        return conversation?.senderUser;\r\n    }\r\n\r\n    const getAvatarReceiverUser = (): string | undefined => {\r\n        if(conversation?.senderUser?.id ===account.id){\r\n            return getUserAvatar(conversation?.receiverUser?.id, conversation?.receiverUser?.imageUrl, conversation?.receiverUser?.sourceRegister);\r\n        }\r\n        return getUserAvatar(conversation?.senderUser?.id, conversation?.senderUser?.imageUrl, conversation?.senderUser?.sourceRegister);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if( listMessages.length ) {\r\n            setListCurrentMessages(listMessages.slice());\r\n        }\r\n    }, [listMessages]);\r\n\r\n    React.useEffect(() => {\r\n        if( newMessage ){\r\n            setListCurrentMessages([\r\n                ...listCurrentMessages,\r\n                newMessage\r\n            ]);\r\n        }\r\n    }, [newMessage])\r\n\r\n    const isMe = (message: IMessage) => {\r\n        if(message?.senderUser?.id === account?.id){\r\n            return true;\r\n        }\r\n        return false\r\n    }\r\n\r\n    const getAvatar = (message: IMessage): string => {\r\n        if( message?.senderUser?.id === account?.id){\r\n            return getUserAvatar(message?.receiverUser?.id, message?.receiverUser?.imageUrl, message?.receiverUser?.sourceRegister);\r\n        }\r\n        return getUserAvatar(message?.senderUser?.id, message?.senderUser?.imageUrl, message?.senderUser?.sourceRegister);\r\n    }\r\n\r\n    const loadMoreMessages = () => {\r\n        callbackLoadMoreMessages();\r\n    }\r\n\r\n    const backToConversations = () => {\r\n        calbackBackToConversations();\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    const subscribeChatMessages = () => {\r\n        getStompClient()?.subscribe(`/topic/chat-message/${account.id}/${getReceiverUser()?.id}`, (data: any) => {\r\n            setNewMessage(JSON.parse(data.body));\r\n        })\r\n    };\r\n\r\n    const redirectProfile = () => {\r\n        if(conversation?.senderUser?.id ===account.id){\r\n            setTimeout(() => {\r\n                navigate(ALL_APP_ROUTES.PROFILE + '/' + conversation?.receiverUser?.id);\r\n            }, 300);\r\n        }\r\n        else{\r\n            setTimeout(() => {\r\n                navigate(ALL_APP_ROUTES.PROFILE + '/' + conversation?.senderUser?.id);\r\n            }, 300);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container-messages\">\r\n            <div className=\"row clearfix\">\r\n                <div className=\"col-lg-12\">\r\n                    <div className=\"card chat-app\">\r\n                        <div className=\"chat\">\r\n                            <div className=\"chat-header clearfix\">\r\n                                <List sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }}>\r\n                                    <ListItem button alignItems=\"center\">\r\n                                        <IconButton aria-label=\"upload picture\"\r\n                                                    component=\"span\"\r\n                                                    onClick={backToConversations}\r\n                                                    sx={{display: {xs: 'inline-flex', md: 'none'}}}>\r\n                                            <ArrowBackIosIcon />\r\n                                        </IconButton>\r\n                                        <ListItemAvatar onClick={() => redirectProfile()}>\r\n                                            <Avatar alt=\"Remy Sharp\" src={getAvatarReceiverUser()} >{getFullnameUser(getReceiverUser())?.charAt(0)}</Avatar>\r\n                                        </ListItemAvatar>\r\n                                        <ListItemText\r\n                                            primary={getFullnameUser(getReceiverUser())}\r\n                                            onClick={() => redirectProfile()}\r\n                                            secondary={\r\n                                                <React.Fragment>\r\n                                                    {/*<Typography*/}\r\n                                                        {/*sx={{ display: 'inline' }}*/}\r\n                                                        {/*component=\"span\"*/}\r\n                                                        {/*variant=\"body2\"*/}\r\n                                                        {/*color=\"text.primary\"*/}\r\n                                                    {/*>*/}\r\n                                                        {/*Ali Connors*/}\r\n                                                    {/*</Typography>*/}\r\n                                                    {/*{\" — I'll be in your neighborhood doing errands this…\"}*/}\r\n                                                </React.Fragment>\r\n                                            }\r\n                                        />\r\n                                    </ListItem>\r\n                                </List>\r\n                            </div>\r\n                            <div className=\"chat-history\">\r\n\r\n\r\n                                {\r\n                                    totalPagesMessages-1 > activePage ? <Box sx={{ paddingTop: 5, textAlign: 'center' }}>\r\n                                        <Button color=\"neutral\" variant=\"outlined\"  onClick={loadMoreMessages}>Load More...</Button>\r\n                                    </Box> : null\r\n                                }\r\n\r\n                                {\r\n                                    loadingListMessages ? <Box sx={{ pt: 5, textAlign: 'center' }}>\r\n                                        <CircularProgress color=\"inherit\"  />\r\n                                    </Box> : null\r\n                                }\r\n\r\n                                <ul className=\"m-b-0\">\r\n                                    {\r\n                                        listCurrentMessages.map((message: IMessage, index: number) => (\r\n                                            <li className=\"clearfix\" key={`message-${index}-${message.id}`}>\r\n                                                <div className={isMe(message) ? 'message-data text-right' : 'message-data message-data-other'}>\r\n                                                    {\r\n                                                        !isMe(message) ? <img src={getAvatar(message)} alt=\"avatar\" /> : null\r\n                                                    }\r\n                                                    <div className=\"message-data-time\">\r\n                                                        <ConvertReactTimeAgo convertDate={message?.dateCreated} />\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className={isMe(message) ? 'message my-message float-right' : 'message other-message'} >\r\n                                                    {message?.content}\r\n                                                </div>\r\n                                            </li>\r\n                                        ))\r\n                                    }\r\n\r\n                                </ul>\r\n                                <div ref={messagesEndRef}></div>\r\n                            </div>\r\n                            <div className=\"chat-message clearfix\">\r\n                                <Box sx={{ flexGrow: 1 }}>\r\n                                    <form onSubmit={formik.handleSubmit}>\r\n                                        <AppBar position=\"static\" color=\"transparent\">\r\n                                            <Toolbar>\r\n                                                <IconButton\r\n                                                    size=\"large\"\r\n                                                    edge=\"start\"\r\n                                                    color=\"inherit\"\r\n                                                    aria-label=\"open drawer\"\r\n                                                    sx={{ mr: 2 }}\r\n                                                >\r\n                                                    <EmojiEmotionsIcon />\r\n                                                </IconButton>\r\n\r\n                                                <FormControl variant=\"standard\"\r\n                                                             fullWidth\r\n                                                             error={formik.touched.content && Boolean(formik.errors.content)}>\r\n                                                    <TextField id=\"content\"\r\n                                                               name=\"content\"\r\n                                                               label=\"Write your message...\"\r\n                                                               variant=\"standard\"\r\n                                                               autoComplete=\"off\"\r\n                                                               value={formik.values.content}\r\n                                                               onChange={formik.handleChange}/>\r\n                                                    <FormHelperText id=\"component-helper-text-message\">{formik.touched.content && formik.errors.content}</FormHelperText>\r\n                                                </FormControl>\r\n\r\n                                                <Box sx={{ flexGrow: 1 }} />\r\n                                                <Box>\r\n                                                    <LoadingButton loading={loadingAddMessage}\r\n                                                                   variant=\"text\"\r\n                                                                   color=\"inherit\"\r\n                                                                   type=\"submit\">\r\n                                                        <SendIcon />\r\n                                                    </LoadingButton>\r\n                                                </Box>\r\n                                            </Toolbar>\r\n                                        </AppBar>\r\n                                    </form>\r\n                                </Box>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {IRootState} from \"../../shared/reducers\";\r\nimport Typography from \"@mui/material/Typography/Typography\";\r\nimport Grid from \"@mui/material/Grid/Grid\";\r\nimport Breadcrumbs from \"@mui/material/Breadcrumbs/Breadcrumbs\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {ALL_APP_ROUTES} from \"../../core/config/all-app-routes\";\r\nimport {deleteConversation, getEntitiesCurrentUser} from \"../../shared/reducers/conversation.reducer\";\r\nimport {Conversation} from \"./ui-segments/Conversation\";\r\nimport Container from \"@mui/material/Container/Container\";\r\nimport {MessageConversation} from \"./ui-segments/MessageConversation\";\r\nimport './Chat.scss';\r\nimport {IConversation} from \"../../shared/model/conversation.model\";\r\nimport {addMessage, getMessagesByConversation, reset as resetMessages} from \"../../shared/reducers/message.reducer\";\r\nimport {IMessage} from \"../../shared/model/message.model\";\r\nimport isEmpty from 'lodash/isEmpty';\r\nimport Box from \"@mui/material/Box/Box\";\r\nimport Alert from \"@mui/material/Alert/Alert\";\r\nimport {AllAppConfig} from \"../../core/config/all-config\";\r\n\r\nexport interface IChatClientProps extends StateProps, DispatchProps {}\r\n\r\nexport const Chat = (props: IChatClientProps) => {\r\n\r\n    const [currentConversation, setCurrentConversation] = React.useState<IConversation>({});\r\n    const [listCurrentMessages, setListCurrentMessages] = React.useState<IMessage[]>([]);\r\n    const [activePageMessages, setActivePageMessages] = React.useState(-1);\r\n    const [openCntainerMessagesMobile, setOpenCntainerMessagesMobile] = React.useState<boolean>(false);\r\n\r\n    const {loadingEntitiesConversation,\r\n        listConversations,\r\n        account,\r\n        getEntitiesCurrentUser} = props;\r\n\r\n    React.useEffect(() => {\r\n        getEntitiesCurrentUser(0, 20, '');\r\n    }, []);\r\n\r\n    const addMessage = (value: IMessage) => {\r\n        props.addMessage(value)\r\n    }\r\n\r\n    const getListMessages = (conversation: IConversation) => {\r\n        props.resetMessages();\r\n        setListCurrentMessages([]);\r\n        setCurrentConversation(conversation);\r\n        setActivePageMessages(0);\r\n        setOpenCntainerMessagesMobile(true);\r\n        props.getMessagesByConversation(0, AllAppConfig.MESSAGES_PER_PAGE, '', conversation.id);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if(props.listMessageByConversation){\r\n\r\n            let tmpListCurrentMessages: IMessage[] = [];\r\n            props.listMessageByConversation.forEach((message: IMessage, index: number) => {\r\n                tmpListCurrentMessages.unshift(message);\r\n            });\r\n\r\n            setListCurrentMessages([\r\n                ...tmpListCurrentMessages,\r\n                ...listCurrentMessages,\r\n            ]);\r\n        }\r\n    }, [props.listMessageByConversation])\r\n\r\n\r\n    React.useEffect(() => {\r\n        if(activePageMessages > 0){ // Just for load more not first time\r\n            props.getMessagesByConversation(activePageMessages, AllAppConfig.MESSAGES_PER_PAGE, '', currentConversation.id);\r\n        }\r\n    }, [activePageMessages])\r\n\r\n    const loadMoreMessages = () => {\r\n        setActivePageMessages(activePageMessages+1);\r\n    }\r\n\r\n    const backToConversations = () => {\r\n        setOpenCntainerMessagesMobile(false);\r\n    }\r\n\r\n    const isOnLine = (email: string) => {\r\n        return props.listConnectedUsers.findIndex(item => item.principal.email==email) >=0;\r\n    }\r\n\r\n    const deleteConversation = (conversation?: IConversation) => {\r\n        props.deleteConversation(conversation?.id);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if(props.deleteSuccessConversation){\r\n            getEntitiesCurrentUser(0, 20, '');\r\n        }\r\n    }, [props.deleteSuccessConversation])\r\n\r\n    return (\r\n        <Container maxWidth=\"xl\">\r\n            <Grid\r\n                container\r\n                style={{\r\n                    paddingTop: 10,\r\n                }}\r\n            >\r\n                <Grid item xs={12} sm={6} md={1}></Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={2}>\r\n                    <Breadcrumbs aria-label=\"breadcrumb\">\r\n                        <Link color=\"inherit\" to={ALL_APP_ROUTES.HOME}>\r\n                            SRF\r\n                        </Link>\r\n                        <Typography color=\"text.primary\">Chat</Typography>\r\n                    </Breadcrumbs>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Grid\r\n                container\r\n                spacing={6}\r\n                style={{\r\n                    marginTop: 50,\r\n                }}\r\n                className=\"container-chat\"\r\n            >\r\n                <Grid item xs={12} sm={6} md={2} sx={{display: { xs: 'none', md: 'flex' }}}></Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={3} className=\"container-chat-conversation\">\r\n                    <Conversation\r\n                        loading={loadingEntitiesConversation}\r\n                        list={listConversations.slice()}\r\n                        account={account}\r\n                        listMessages={getListMessages}\r\n                        isOnLine={isOnLine}\r\n                        deleteConversation={deleteConversation}/>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={12} md={5} className={openCntainerMessagesMobile ? 'container-chat-message open': 'container-chat-message'}>\r\n                    {\r\n                        !isEmpty(currentConversation) ? <MessageConversation account={account}\r\n                                                                   conversation={currentConversation}\r\n                                                                   callbackAddMessage={addMessage}\r\n                                                                   loadingListMessages={props.loadingMessageByConversation}\r\n                                                                   listMessages={listCurrentMessages}\r\n                                                                   loadingAddMessage={props.loadingEntityMessage}\r\n                                                                   totalPagesMessages={props.totalPagesMessages}\r\n                                                                   activePage={activePageMessages}\r\n                                                                   callbackLoadMoreMessages={loadMoreMessages}\r\n                                                                   calbackBackToConversations={backToConversations}/> :\r\n                            <Box>\r\n                                <Alert severity=\"warning\">Please select a conversation</Alert>\r\n                            </Box>\r\n                    }\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </Container>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = ({ conversation, user, message, webSocketState }: IRootState) => ({\r\n    loadingEntitiesConversation: conversation.loadingEntities,\r\n    listConversations: conversation.entities,\r\n    deleteSuccessConversation: conversation.deleteSuccess,\r\n\r\n    account: user.currentUser,\r\n\r\n    loadingMessageByConversation: message.loadingEntities,\r\n    listMessageByConversation: message.entities,\r\n    loadingEntityMessage: message.loadingEntity,\r\n    addSuccessMessage: message.addSuccess,\r\n    totalPagesMessages: message.totalPages,\r\n\r\n    listConnectedUsers: webSocketState.listConnectedUsers\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    getEntitiesCurrentUser,\r\n    getMessagesByConversation,\r\n    addMessage,\r\n    resetMessages,\r\n    deleteConversation\r\n};\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Chat);","import * as React from 'react';\r\nimport ReactTimeAgo from 'react-time-ago';\r\n\r\nexport const ConvertReactTimeAgo = (date: any, locale?: any) => {\r\n  if (date && date.convertDate) {\r\n    return <ReactTimeAgo date={new Date(date.convertDate)} locale='fr-FR' />;\r\n  } else {\r\n    return <></>;\r\n  }\r\n};\r\n","import { styled } from '@mui/material/styles';\r\nimport Badge from '@mui/material/Badge';\r\n\r\nexport const StyledBadge = styled(Badge)(({ theme }) => ({\r\n    '& .MuiBadge-badge': {\r\n        backgroundColor: theme.palette.success,\r\n        color: theme.palette.success,\r\n        boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\r\n        '&::after': {\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            width: '100%',\r\n            height: '100%',\r\n            borderRadius: '50%',\r\n            animation: 'ripple 1.2s infinite ease-in-out',\r\n            border: '1px solid currentColor',\r\n            content: '\"\"',\r\n        },\r\n    },\r\n    '@keyframes ripple': {\r\n        '0%': {\r\n            transform: 'scale(.8)',\r\n            opacity: 1,\r\n        },\r\n        '100%': {\r\n            transform: 'scale(2.4)',\r\n            opacity: 0,\r\n        },\r\n    },\r\n}));","import React from \"react\";\r\nimport {TransitionProps} from \"@mui/material/transitions\";\r\nimport Slide from \"@mui/material/Slide/Slide\";\r\n\r\n\r\nexport const TransitionModal = React.forwardRef(function Transition(\r\n    props: TransitionProps & {\r\n        children: React.ReactElement<any, any>;\r\n    },\r\n    ref: React.Ref<unknown>\r\n) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M11.67 3.87 9.9 2.1 0 12l9.9 9.9 1.77-1.77L3.54 12z\"\n}), 'ArrowBackIos');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM8.5 8c.83 0 1.5.67 1.5 1.5S9.33 11 8.5 11 7 10.33 7 9.5 7.67 8 8.5 8zM12 18c-2.28 0-4.22-1.66-5-4h10c-.78 2.34-2.72 4-5 4zm3.5-7c-.83 0-1.5-.67-1.5-1.5S14.67 8 15.5 8s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z\"\n}), 'EmojiEmotions');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M2.01 21 23 12 2.01 3 2 10l15 2-15 2z\"\n}), 'Send');\n\nexports.default = _default;","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getContainerUtilityClass(slot) {\n  return generateUtilityClass('MuiContainer', slot);\n}\nconst containerClasses = generateUtilityClasses('MuiContainer', ['root', 'disableGutters', 'fixed', 'maxWidthXs', 'maxWidthSm', 'maxWidthMd', 'maxWidthLg', 'maxWidthXl']);\nexport default containerClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"component\", \"disableGutters\", \"fixed\", \"maxWidth\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled from '../styles/styled';\nimport { getContainerUtilityClass } from './containerClasses';\nimport capitalize from '../utils/capitalize';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    fixed,\n    disableGutters,\n    maxWidth\n  } = ownerState;\n  const slots = {\n    root: ['root', maxWidth && `maxWidth${capitalize(String(maxWidth))}`, fixed && 'fixed', disableGutters && 'disableGutters']\n  };\n  return composeClasses(slots, getContainerUtilityClass, classes);\n};\n\nconst ContainerRoot = styled('div', {\n  name: 'MuiContainer',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[`maxWidth${capitalize(String(ownerState.maxWidth))}`], ownerState.fixed && styles.fixed, ownerState.disableGutters && styles.disableGutters];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  width: '100%',\n  marginLeft: 'auto',\n  boxSizing: 'border-box',\n  marginRight: 'auto',\n  display: 'block'\n}, !ownerState.disableGutters && {\n  paddingLeft: theme.spacing(2),\n  paddingRight: theme.spacing(2),\n  [theme.breakpoints.up('sm')]: {\n    paddingLeft: theme.spacing(3),\n    paddingRight: theme.spacing(3)\n  }\n}), ({\n  theme,\n  ownerState\n}) => ownerState.fixed && Object.keys(theme.breakpoints.values).reduce((acc, breakpoint) => {\n  const value = theme.breakpoints.values[breakpoint];\n\n  if (value !== 0) {\n    acc[theme.breakpoints.up(breakpoint)] = {\n      maxWidth: `${value}${theme.breakpoints.unit}`\n    };\n  }\n\n  return acc;\n}, {}), ({\n  theme,\n  ownerState\n}) => _extends({}, ownerState.maxWidth === 'xs' && {\n  [theme.breakpoints.up('xs')]: {\n    maxWidth: Math.max(theme.breakpoints.values.xs, 444)\n  }\n}, ownerState.maxWidth && ownerState.maxWidth !== 'xs' && {\n  [theme.breakpoints.up(ownerState.maxWidth)]: {\n    maxWidth: `${theme.breakpoints.values[ownerState.maxWidth]}${theme.breakpoints.unit}`\n  }\n}));\nconst Container = /*#__PURE__*/React.forwardRef(function Container(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiContainer'\n  });\n\n  const {\n    className,\n    component = 'div',\n    disableGutters = false,\n    fixed = false,\n    maxWidth = 'lg'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props, {\n    component,\n    disableGutters,\n    fixed,\n    maxWidth\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(ContainerRoot, _extends({\n    as: component,\n    ownerState: ownerState,\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Container.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the left and right padding is removed.\n   * @default false\n   */\n  disableGutters: PropTypes.bool,\n\n  /**\n   * Set the max-width to match the min-width of the current breakpoint.\n   * This is useful if you'd prefer to design for a fixed set of sizes\n   * instead of trying to accommodate a fully fluid viewport.\n   * It's fluid by default.\n   * @default false\n   */\n  fixed: PropTypes.bool,\n\n  /**\n   * Determine the max-width of the container.\n   * The container width grows with the size of the screen.\n   * Set to `false` to disable `maxWidth`.\n   * @default 'lg'\n   */\n  maxWidth: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]), PropTypes.string]),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Container;","export function isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n} // Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n// Emulate the sass function \"unit\"\n\nexport function getUnit(input) {\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || '';\n} // Emulate the sass function \"unitless\"\n\nexport function toUnitless(length) {\n  return parseFloat(length);\n} // Convert any CSS <length> or <percentage> value to any another.\n// From https://github.com/KyleAMathews/convert-css-length\n\nexport function convertLength(baseFontSize) {\n  return (length, toUnit) => {\n    const fromUnit = getUnit(length); // Optimize for cases where `from` and `to` units are accidentally the same.\n\n    if (fromUnit === toUnit) {\n      return length;\n    } // Convert input length to pixels.\n\n\n    let pxLength = toUnitless(length);\n\n    if (fromUnit !== 'px') {\n      if (fromUnit === 'em') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      } else if (fromUnit === 'rem') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      }\n    } // Convert length in pixels to the output unit\n\n\n    let outputLength = pxLength;\n\n    if (toUnit !== 'px') {\n      if (toUnit === 'em') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else if (toUnit === 'rem') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else {\n        return length;\n      }\n    }\n\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\n  };\n}\nexport function alignProperty({\n  size,\n  grid\n}) {\n  const sizeBelow = size - size % grid;\n  const sizeAbove = sizeBelow + grid;\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\n} // fontGrid finds a minimal grid (in rem) for the fontSize values so that the\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\n// without changing the relative line height\n\nexport function fontGrid({\n  lineHeight,\n  pixels,\n  htmlFontSize\n}) {\n  return pixels / (lineHeight * htmlFontSize);\n}\n/**\n * generate a responsive version of a given CSS property\n * @example\n * responsiveProperty({\n *   cssProperty: 'fontSize',\n *   min: 15,\n *   max: 20,\n *   unit: 'px',\n *   breakpoints: [300, 600],\n * })\n *\n * // this returns\n *\n * {\n *   fontSize: '15px',\n *   '@media (min-width:300px)': {\n *     fontSize: '17.5px',\n *   },\n *   '@media (min-width:600px)': {\n *     fontSize: '20px',\n *   },\n * }\n * @param {Object} params\n * @param {string} params.cssProperty - The CSS property to be made responsive\n * @param {number} params.min - The smallest value of the CSS property\n * @param {number} params.max - The largest value of the CSS property\n * @param {string} [params.unit] - The unit to be used for the CSS property\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\n * @returns {Object} responsive styles for {params.cssProperty}\n */\n\nexport function responsiveProperty({\n  cssProperty,\n  min,\n  max,\n  unit = 'rem',\n  breakpoints = [600, 900, 1200],\n  transform = null\n}) {\n  const output = {\n    [cssProperty]: `${min}${unit}`\n  };\n  const factor = (max - min) / breakpoints[breakpoints.length - 1];\n  breakpoints.forEach(breakpoint => {\n    let value = min + factor * breakpoint;\n\n    if (transform !== null) {\n      value = transform(value);\n    }\n\n    output[`@media (min-width:${breakpoint}px)`] = {\n      [cssProperty]: `${Math.round(value * 10000) / 10000}${unit}`\n    };\n  });\n  return output;\n}","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getSkeletonUtilityClass(slot) {\n  return generateUtilityClass('MuiSkeleton', slot);\n}\nconst skeletonClasses = generateUtilityClasses('MuiSkeleton', ['root', 'text', 'rectangular', 'circular', 'pulse', 'wave', 'withChildren', 'fitContent', 'heightAuto']);\nexport default skeletonClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"animation\", \"className\", \"component\", \"height\", \"style\", \"variant\", \"width\"];\n\nlet _ = t => t,\n    _t,\n    _t2,\n    _t3,\n    _t4;\n\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { keyframes, css } from '@mui/system';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { alpha, unstable_getUnit as getUnit, unstable_toUnitless as toUnitless } from '../styles';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getSkeletonUtilityClass } from './skeletonClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    variant,\n    animation,\n    hasChildren,\n    width,\n    height\n  } = ownerState;\n  const slots = {\n    root: ['root', variant, animation, hasChildren && 'withChildren', hasChildren && !width && 'fitContent', hasChildren && !height && 'heightAuto']\n  };\n  return composeClasses(slots, getSkeletonUtilityClass, classes);\n};\n\nconst pulseKeyframe = keyframes(_t || (_t = _`\n  0% {\n    opacity: 1;\n  }\n\n  50% {\n    opacity: 0.4;\n  }\n\n  100% {\n    opacity: 1;\n  }\n`));\nconst waveKeyframe = keyframes(_t2 || (_t2 = _`\n  0% {\n    transform: translateX(-100%);\n  }\n\n  50% {\n    /* +0.5s of delay between each loop */\n    transform: translateX(100%);\n  }\n\n  100% {\n    transform: translateX(100%);\n  }\n`));\nconst SkeletonRoot = styled('span', {\n  name: 'MuiSkeleton',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[ownerState.variant], ownerState.animation !== false && styles[ownerState.animation], ownerState.hasChildren && styles.withChildren, ownerState.hasChildren && !ownerState.width && styles.fitContent, ownerState.hasChildren && !ownerState.height && styles.heightAuto];\n  }\n})(({\n  theme,\n  ownerState\n}) => {\n  const radiusUnit = getUnit(theme.shape.borderRadius) || 'px';\n  const radiusValue = toUnitless(theme.shape.borderRadius);\n  return _extends({\n    display: 'block',\n    // Create a \"on paper\" color with sufficient contrast retaining the color\n    backgroundColor: alpha(theme.palette.text.primary, theme.palette.mode === 'light' ? 0.11 : 0.13),\n    height: '1.2em'\n  }, ownerState.variant === 'text' && {\n    marginTop: 0,\n    marginBottom: 0,\n    height: 'auto',\n    transformOrigin: '0 55%',\n    transform: 'scale(1, 0.60)',\n    borderRadius: `${radiusValue}${radiusUnit}/${Math.round(radiusValue / 0.6 * 10) / 10}${radiusUnit}`,\n    '&:empty:before': {\n      content: '\"\\\\00a0\"'\n    }\n  }, ownerState.variant === 'circular' && {\n    borderRadius: '50%'\n  }, ownerState.hasChildren && {\n    '& > *': {\n      visibility: 'hidden'\n    }\n  }, ownerState.hasChildren && !ownerState.width && {\n    maxWidth: 'fit-content'\n  }, ownerState.hasChildren && !ownerState.height && {\n    height: 'auto'\n  });\n}, ({\n  ownerState\n}) => ownerState.animation === 'pulse' && css(_t3 || (_t3 = _`\n      animation: ${0} 1.5s ease-in-out 0.5s infinite;\n    `), pulseKeyframe), ({\n  ownerState,\n  theme\n}) => ownerState.animation === 'wave' && css(_t4 || (_t4 = _`\n      position: relative;\n      overflow: hidden;\n\n      /* Fix bug in Safari https://bugs.webkit.org/show_bug.cgi?id=68196 */\n      -webkit-mask-image: -webkit-radial-gradient(white, black);\n\n      &::after {\n        animation: ${0} 1.6s linear 0.5s infinite;\n        background: linear-gradient(90deg, transparent, ${0}, transparent);\n        content: '';\n        position: absolute;\n        transform: translateX(-100%); /* Avoid flash during server-side hydration */\n        bottom: 0;\n        left: 0;\n        right: 0;\n        top: 0;\n      }\n    `), waveKeyframe, theme.palette.action.hover));\nconst Skeleton = /*#__PURE__*/React.forwardRef(function Skeleton(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiSkeleton'\n  });\n\n  const {\n    animation = 'pulse',\n    className,\n    component = 'span',\n    height,\n    style,\n    variant = 'text',\n    width\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props, {\n    animation,\n    component,\n    variant,\n    hasChildren: Boolean(other.children)\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(SkeletonRoot, _extends({\n    as: component,\n    ref: ref,\n    className: clsx(classes.root, className),\n    ownerState: ownerState\n  }, other, {\n    style: _extends({\n      width,\n      height\n    }, style)\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Skeleton.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The animation.\n   * If `false` the animation effect is disabled.\n   * @default 'pulse'\n   */\n  animation: PropTypes.oneOf(['pulse', 'wave', false]),\n\n  /**\n   * Optional children to infer width and height from.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Height of the skeleton.\n   * Useful when you don't want to adapt the skeleton to a text element but for instance a card.\n   */\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * The type of content that will be rendered.\n   * @default 'text'\n   */\n  variant: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['circular', 'rectangular', 'text']), PropTypes.string]),\n\n  /**\n   * Width of the skeleton.\n   * Useful when the skeleton is inside an inline element with no width of its own.\n   */\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n} : void 0;\nexport default Skeleton;","var baseKeys = require('./_baseKeys'),\n    getTag = require('./_getTag'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isArrayLike = require('./isArrayLike'),\n    isBuffer = require('./isBuffer'),\n    isPrototype = require('./_isPrototype'),\n    isTypedArray = require('./isTypedArray');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * _.isEmpty(null);\n * // => true\n *\n * _.isEmpty(true);\n * // => true\n *\n * _.isEmpty(1);\n * // => true\n *\n * _.isEmpty([1, 2, 3]);\n * // => false\n *\n * _.isEmpty({ 'a': 1 });\n * // => false\n */\nfunction isEmpty(value) {\n  if (value == null) {\n    return true;\n  }\n  if (isArrayLike(value) &&\n      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n        isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n    return !value.length;\n  }\n  var tag = getTag(value);\n  if (tag == mapTag || tag == setTag) {\n    return !value.size;\n  }\n  if (isPrototype(value)) {\n    return !baseKeys(value).length;\n  }\n  for (var key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = isEmpty;\n"],"names":["ConversationLoading","List","sx","width","bgcolor","map","key","ListItemButton","alignItems","ListItemAvatar","Skeleton","variant","height","ListItemText","primary","secondary","Conversation","loading","list","account","listMessages","isOnLine","deleteConversation","React","openDeleteConvModal","setOpenDeleteConvModal","undefined","conversationDel","setConversationDel","t","useTranslation","getAvatar","conversatioinMessage","conversation","senderUser","id","getUserAvatar","receiverUser","imageUrl","sourceRegister","isUserOnLine","email","getFullname","getFullnameUser","handleCloseDeleteConvModal","handleDeleteConvModal","Box","Paper","component","p","display","IconButton","Menu","InputBase","ml","flex","placeholder","inputProps","type","Search","index","ListItem","button","onClick","secondaryAction","edge","event","stopPropagation","deleteConv","Delete","color","overlap","anchorOrigin","vertical","horizontal","Avatar","alt","src","className","Typography","convertDate","dateCreated","message","content","Divider","length","Alert","severity","Dialog","open","TransitionComponent","TransitionModal","keepMounted","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","validationSchemaMessage","Yup","required","initialValues","MessageConversation","callbackAddMessage","loadingListMessages","loadingAddMessage","totalPagesMessages","activePage","callbackLoadMoreMessages","calbackBackToConversations","listCurrentMessages","setListCurrentMessages","newMessage","setNewMessage","messagesEndRef","navigate","useNavigate","formik","useFormik","validationSchema","onSubmit","values","entity","convertDateTimeToServer","Date","isRead","getReceiverUser","getStompClient","send","JSON","stringify","resetForm","setTimeout","current","scrollIntoView","behavior","subscribeChatMessages","slice","isMe","subscribe","data","parse","body","redirectProfile","ALL_APP_ROUTES","maxWidth","xs","md","ArrowBackIos","getAvatarReceiverUser","charAt","paddingTop","textAlign","pt","CircularProgress","ref","flexGrow","handleSubmit","AppBar","position","Toolbar","size","mr","EmojiEmotions","FormControl","fullWidth","error","touched","Boolean","errors","TextField","name","label","autoComplete","value","onChange","handleChange","FormHelperText","LoadingButton","Send","Chat","props","currentConversation","setCurrentConversation","activePageMessages","setActivePageMessages","openCntainerMessagesMobile","setOpenCntainerMessagesMobile","loadingEntitiesConversation","listConversations","getEntitiesCurrentUser","listMessageByConversation","tmpListCurrentMessages","forEach","unshift","getMessagesByConversation","AllAppConfig","deleteSuccessConversation","Container","Grid","container","style","item","sm","Breadcrumbs","to","spacing","marginTop","resetMessages","listConnectedUsers","findIndex","principal","isEmpty","addMessage","loadingMessageByConversation","loadingEntityMessage","mapDispatchToProps","connect","user","webSocketState","loadingEntities","entities","deleteSuccess","currentUser","loadingEntity","addSuccessMessage","addSuccess","totalPages","ConvertReactTimeAgo","date","locale","StyledBadge","styled","Badge","theme","backgroundColor","palette","success","boxShadow","background","paper","top","left","borderRadius","animation","border","transform","opacity","direction","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d","getContainerUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","ContainerRoot","overridesResolver","styles","ownerState","root","capitalize","String","fixed","disableGutters","_extends","marginLeft","boxSizing","marginRight","paddingLeft","paddingRight","breakpoints","up","Object","keys","reduce","acc","breakpoint","unit","Math","max","inProps","useThemeProps","other","_objectWithoutPropertiesLoose","classes","slots","composeClasses","useUtilityClasses","_jsx","as","clsx","getUnit","input","match","toUnitless","parseFloat","getSkeletonUtilityClass","_t","_t2","_t3","_t4","pulseKeyframe","keyframes","waveKeyframe","SkeletonRoot","hasChildren","withChildren","fitContent","heightAuto","radiusUnit","shape","radiusValue","alpha","text","mode","marginBottom","transformOrigin","round","visibility","css","action","hover","children","baseKeys","getTag","isArguments","isArray","isArrayLike","isBuffer","isPrototype","isTypedArray","hasOwnProperty","prototype","module","splice","tag","call"],"sourceRoot":""}