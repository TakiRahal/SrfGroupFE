{"version":3,"file":"static/js/721.3262a4d7.chunk.js","mappings":"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","sources":["main-features/offer/components/search/validation/initial-values-filter-search.ts","main-features/offer/components/search/ui-segments/FilterOffer.tsx","main-features/offer/components/search/ui-segments/LeftSearch.tsx","main-features/offer/components/search/ui-segments/RightSearch.tsx","main-features/offer/components/search/search.tsx"],"sourcesContent":["import * as Yup from 'yup';\r\nimport {IAddress} from \"../../../../../shared/model/address.model\";\r\n\r\nexport const initialValuesFilterSearch = {\r\n    address: {} as IAddress,\r\n};\r\n\r\nexport const validationSchemFilterSearch = Yup.object({\r\n    address: Yup.object().nullable().notRequired().default(null)\r\n});\r\n","import List from \"@mui/material/List/List\";\r\nimport ListSubheader from \"@mui/material/ListSubheader/ListSubheader\";\r\nimport ListItem from \"@mui/material/ListItem/ListItem\";\r\nimport FormControl from \"@mui/material/FormControl/FormControl\";\r\nimport Autocomplete from \"@mui/material/Autocomplete/Autocomplete\";\r\nimport Box from \"@mui/material/Box/Box\";\r\nimport TextField from \"@mui/material/TextField/TextField\";\r\nimport {useTranslation} from \"react-i18next\";\r\nimport Typography from \"@mui/material/Typography/Typography\";\r\nimport Grid from \"@mui/material/Grid/Grid\";\r\nimport Slider from \"@mui/material/Slider/Slider\";\r\nimport * as React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport {initialValuesFilterSearch, validationSchemFilterSearch} from \"../validation/initial-values-filter-search\";\r\nimport { IAddress } from \"../../../../../shared/model/address.model\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\n\r\nfunction valuetext(value: number) {\r\n    return `${value}Â°C`;\r\n}\r\n\r\nconst initialValues = initialValuesFilterSearch;\r\n\r\nexport function FilterOffer({listAddress, handelChange}: { listAddress: IAddress[], handelChange: Function }) {\r\n\r\n    const [value, setValue] = React.useState<number[]>([20, 50]);\r\n\r\n    const handleChange = (event: Event, newValue: number | number[]) => {\r\n        console.log('handleChange ', newValue);\r\n        setValue(newValue as number[]);\r\n    };\r\n\r\n    const {t} = useTranslation();\r\n\r\n    const formik = useFormik({\r\n        initialValues,\r\n        validationSchema: validationSchemFilterSearch,\r\n        onSubmit: (values: any) => {\r\n\r\n        },\r\n    });\r\n\r\n    React.useEffect(() => {\r\n        if( !isEmpty(formik.values.address) ){\r\n            handelChange(formik.values);\r\n        }\r\n    }, [formik.values.address])\r\n\r\n    return (\r\n        <Box>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <List\r\n                    sx={{width: '100%', mb: 4}}\r\n                    component=\"nav\"\r\n                    aria-labelledby=\"nested-list-subheader\"\r\n                    subheader={\r\n                        <ListSubheader component=\"div\" id=\"nested-list-subheader\">\r\n                            FILTRER PAR\r\n                        </ListSubheader>\r\n                    }\r\n                >\r\n\r\n                    <ListItem sx={{my: 2}}>\r\n                        <FormControl fullWidth variant=\"standard\">\r\n                            <Autocomplete\r\n                                id=\"addressOffer\"\r\n                                options={listAddress}\r\n                                autoHighlight\r\n                                value={formik.values.address}\r\n                                onChange={(e, value) => formik.setFieldValue('address', value || null)}\r\n                                getOptionLabel={(option) => option.city || ''}\r\n                                renderOption={(propsRender, option) => (\r\n                                    <Box component=\"li\" {...propsRender}>\r\n                                        {option.city}\r\n                                    </Box>\r\n                                )}\r\n                                renderInput={params => (\r\n                                    <TextField\r\n                                        {...params}\r\n                                        label={t<string>('common.label_address')}\r\n                                        variant=\"standard\"\r\n                                        inputProps={{\r\n                                            ...params.inputProps,\r\n                                            form: {\r\n                                                autocomplete: 'off',\r\n                                            },\r\n                                            autoComplete: 'off', // disable autocomplete and autofill\r\n                                        }}\r\n                                    />\r\n                                )}\r\n                            />\r\n                        </FormControl>\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <Box sx={{width: '100%', my: 2}}>\r\n                            <Typography id=\"input-slider\" gutterBottom>\r\n                                {t<string>('common.label_amount')}\r\n                            </Typography>\r\n                            <Grid container spacing={2} alignItems=\"center\">\r\n                                <Grid item>\r\n                                    min\r\n                                </Grid>\r\n                                <Grid item xs>\r\n                                    <Slider\r\n                                        getAriaLabel={() => 'Temperature range'}\r\n                                        value={value}\r\n                                        onChange={handleChange}\r\n                                        valueLabelDisplay=\"auto\"\r\n                                        getAriaValueText={valuetext}\r\n                                        color=\"secondary\"\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    max\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                    </ListItem>\r\n                </List>\r\n            </form>\r\n        </Box>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport Box from '@mui/material/Box/Box';\r\nimport {FilterOffer} from \"./FilterOffer\";\r\nimport {IAddress} from \"../../../../../shared/model/address.model\";\r\n\r\nexport default function LeftSearchClient({listAddress, filterCallback}: {listAddress: IAddress[], filterCallback: Function}) {\r\n\r\n    React.useEffect(() => {\r\n        try {\r\n          if (FB) {\r\n            FB.XFBML.parse();\r\n          }\r\n        } catch (e) {\r\n          window.console.error('FB not defined');\r\n        }\r\n    }, []);\r\n\r\n    const onChange = (values: any) => {\r\n        console.log('onChange values ', values);\r\n        filterCallback(values);\r\n    }\r\n\r\n    return (\r\n        <Box sx={{ width: '100%'}}>\r\n\r\n            <FilterOffer listAddress={listAddress} handelChange={onChange}/>\r\n\r\n            <Box sx={{mb: 4}}>\r\n                <div style={{width: '100%'}}>\r\n                    <div\r\n                        className=\"fb-page\"\r\n                        data-href=\"https://www.facebook.com/profile.php?id=100054409273167\"\r\n                        data-tabs=\"timeline\"\r\n                        data-width=\"250\"\r\n                        data-height=\"\"\r\n                        data-small-header=\"false\"\r\n                        data-adapt-container-width=\"true\"\r\n                        data-hide-cover=\"false\"\r\n                        data-show-facepile=\"true\"\r\n                    ></div>\r\n                </div>\r\n\r\n            </Box>\r\n\r\n        </Box>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Box from \"@mui/material/Box/Box\";\r\nimport List from \"@mui/material/List/List\";\r\nimport ListSubheader from \"@mui/material/ListSubheader/ListSubheader\";\r\nimport ListItemButton from \"@mui/material/ListItemButton/ListItemButton\";\r\nimport ListItemAvatar from \"@mui/material/ListItemAvatar/ListItemAvatar\";\r\nimport Avatar from \"@mui/material/Avatar/Avatar\";\r\nimport ListItemText from \"@mui/material/ListItemText/ListItemText\";\r\nimport Divider from \"@mui/material/Divider/Divider\";\r\nimport Card from \"@mui/material/Card/Card\";\r\nimport CardContent from \"@mui/material/CardContent/CardContent\";\r\n\r\n\r\nexport default function RightSearch() {\r\n    return(\r\n        <Box>\r\n            <List\r\n                sx={{ width: '100%', mb: 4 }}\r\n                component=\"nav\"\r\n                aria-labelledby=\"nested-list-subheader\"\r\n                subheader={\r\n                    <ListSubheader component=\"div\" id=\"nested-list-subheader\">\r\n                        RecommandÃ© pour vous\r\n                    </ListSubheader>\r\n                } >\r\n                {\r\n                    [0, 1, 2, 3, 4, 5].map((key) => (\r\n                        <Box key={key}>\r\n                            <ListItemButton>\r\n                                <ListItemAvatar>\r\n                                    <Avatar\r\n                                        alt=\"avatar\"\r\n                                        src=\"https://source.unsplash.com/random\"\r\n                                    />\r\n                                </ListItemAvatar>\r\n                                <ListItemText primary=\"Sent mail\" secondary=\"September 14, 2016\" />\r\n                            </ListItemButton>\r\n                            <Divider />\r\n                        </Box>\r\n                    ))\r\n                }\r\n            </List>\r\n\r\n            <Card sx={{my: 3}}>\r\n                <CardContent>\r\n                    <iframe\r\n                        width=\"100%\"\r\n                        height=\"315\"\r\n                        src=\"https://www.youtube.com/embed/668nUCeBHyY\"\r\n                        title=\"YouTube video player\"\r\n                        frameBorder=\"0\"\r\n                        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n                        allowFullScreen\r\n                    ></iframe>\r\n                </CardContent>\r\n            </Card>\r\n\r\n            {/*<ProblemeDeclaration />*/}\r\n        </Box>\r\n    );\r\n}\r\n","import Box from \"@mui/material/Box\";\r\nimport React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    fetchPublicOffers,\r\n    entitiesPublicOffer,\r\n    loadingEntitiesPublicOffer,\r\n    resetPublicOffers,\r\n    totalItemsPublicOffer, totalPagesPublicOffer\r\n} from \"../../store/slice\";\r\nimport {TypeDisplaySearchOffers} from \"../../../../shared/enums/type-offer.enum\";\r\nimport {AllAppConfig} from \"../../../../core/config/all-config\";\r\nimport {getFullUrlWithParams, isOnLine} from \"../../../../shared/utils/utils-functions\";\r\nimport queryString from 'query-string';\r\nimport {Link, useLocation, useNavigate} from \"react-router-dom\";\r\nimport {ALL_APP_ROUTES} from \"../../../../core/config/all-app-routes\";\r\nimport {useTranslation} from \"react-i18next\";\r\nimport {Grid} from \"@mui/material\";\r\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport {SearchAppBar} from \"../../../../shared/layout/menus/SearchAppBar\";\r\nimport {allCategorySelector} from \"../../../category/store/slice\";\r\nimport {allAddressSelector} from \"../../../address/store/slice\";\r\nimport LoadingSearchOffers from \"./ui-segments/LoadingSearchOffers\";\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport ItemsOffer from \"../../../../shared/components/item-offer/ItemsOffer\";\r\nimport Alert from \"@mui/material/Alert\";\r\nimport LeftSearch from \"./ui-segments/LeftSearch\";\r\nimport RightSearch from \"./ui-segments/RightSearch\";\r\nimport {allSessionSelector, listConnectedUsersWebsocket} from \"../../../user/store/slice\";\r\n\r\nexport default function Search () {\r\n\r\n    const [typeDisplayOffers, setTypeDisplayOffers] = React.useState<TypeDisplaySearchOffers>(TypeDisplaySearchOffers.Grid);\r\n    const [activePage, setActivePage] = React.useState(-1);\r\n    const [isSearchCalback, setIsSearchCalback] = React.useState<boolean>(false);\r\n    const { search } = useLocation();\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n    const { t } = useTranslation();\r\n\r\n    const {isAuthenticated, currentUser} = useSelector(allSessionSelector);\r\n\r\n    const entitiesPublicOfferSelector = useSelector(entitiesPublicOffer) ?? [];\r\n    const totalItemsPublicOfferSelector = useSelector(totalItemsPublicOffer) ?? -1;\r\n    const totalPagesPublicOfferSelector = useSelector(totalPagesPublicOffer) ?? 0;\r\n    const loadingEntitiesPublicOfferSelector = useSelector(loadingEntitiesPublicOffer) ?? false;\r\n\r\n    // const {publicEntities, loadingPublicEntities, totalItems, totalPages} = useSelector(allPublicOffersSelector);\r\n    const entitiesCategories = useSelector(allCategorySelector).entities ?? [];\r\n    const entitiesAddress = useSelector(allAddressSelector).entities ?? [];\r\n    const listConnectedUsersWebsocketSelector = useSelector(listConnectedUsersWebsocket) ?? [];\r\n\r\n    const resetAll = () => {\r\n        dispatch(resetPublicOffers({}));\r\n        setActivePage(0);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        setActivePage(-1);\r\n        resetAll();\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        if(activePage>=0){\r\n            const values = queryString.parse(search);\r\n            let queryParams = getFullUrlWithParams(values);\r\n            dispatch(fetchPublicOffers({\r\n                page: activePage,\r\n                size: AllAppConfig.OFFERS_PER_PAGE,\r\n                queryParams: queryParams\r\n            }));\r\n        }\r\n    }, [activePage]);\r\n\r\n    React.useEffect(() => {\r\n        if(isSearchCalback){\r\n            const values = queryString.parse(search);\r\n            let queryParams = getFullUrlWithParams(values);\r\n            dispatch(fetchPublicOffers({\r\n                page: activePage,\r\n                size: AllAppConfig.OFFERS_PER_PAGE,\r\n                queryParams: queryParams\r\n            }));\r\n            setIsSearchCalback(false);\r\n        }\r\n    }, [isSearchCalback]);\r\n\r\n\r\n    const loadMore = () => {\r\n        setActivePage(activePage+1);\r\n    }\r\n\r\n    const searchCalback = (values: any) => {\r\n        navigate({\r\n            pathname: ALL_APP_ROUTES.SEARCH,\r\n            search: \"?\" + new URLSearchParams(getFullUrlWithParams(values)).toString()\r\n        }, { replace: false })\r\n        setIsSearchCalback(true);\r\n        resetAll();\r\n    }\r\n\r\n    const typeDisplay = (value: TypeDisplaySearchOffers) => {\r\n        setTypeDisplayOffers(value);\r\n    }\r\n\r\n    const isUserOnline = (email: string) => {\r\n        return isOnLine(listConnectedUsersWebsocketSelector.slice(), email, currentUser.email);\r\n    }\r\n\r\n    return (\r\n        <Box  sx={{ px: { xs: 2, md: 0 } }}>\r\n            <Grid container sx={{ pt: 2 }}>\r\n                <Grid item xs={12} sm={6} md={1}></Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={2}>\r\n                    <Breadcrumbs aria-label=\"breadcrumb\">\r\n                        <Link color=\"inherit\" to={ALL_APP_ROUTES.HOME}>\r\n                            SRF\r\n                        </Link>\r\n                        <Typography color=\"text.primary\">{t<string>('common.label_search')}</Typography>\r\n                    </Breadcrumbs>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Grid\r\n                container\r\n                spacing={6}\r\n                sx={{mt: 0}}>\r\n                <Grid item xs={12} sm={6} md={1}></Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={2} sx={{ display: { xs: 'none', md: 'flex' } }}>\r\n                    <LeftSearch listAddress={entitiesAddress.slice()} filterCallback={searchCalback}/>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={6} sx={{pt: {xs: '0 !important', md: '48px !important'}}}>\r\n                    <div\r\n                        style={{\r\n                            maxWidth: '100%',\r\n                            marginBottom: 100,\r\n                        }}\r\n                    >\r\n                        <SearchAppBar entitiesCategories={entitiesCategories.slice()} searchCalback={searchCalback} typeDisplayCallback={typeDisplay} listAddress={entitiesAddress.slice()}/>\r\n                    </div>\r\n\r\n                    <InfiniteScroll\r\n                        pageStart={activePage}\r\n                        loadMore={loadMore}\r\n                        hasMore={totalPagesPublicOfferSelector-1 > activePage}\r\n                        loader={<div className=\"loader\" key={0}></div>}\r\n                        threshold={0}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ItemsOffer listOffers={entitiesPublicOfferSelector.slice()} typeDisplay={typeDisplayOffers} isOnLine={(email: string) => isUserOnline(email)}/>\r\n\r\n                        {\r\n                            loadingEntitiesPublicOfferSelector ? <LoadingSearchOffers typeDisplay={typeDisplayOffers}/> : totalItemsPublicOfferSelector ===0 ?  <Alert severity=\"warning\">No Offers found</Alert> : null\r\n                        }\r\n\r\n                    </InfiniteScroll>\r\n\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={2} sx={{ display: { xs: 'none', md: 'block' } }}>\r\n                    <RightSearch />\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </Box>\r\n    );\r\n}\r\n"],"names":["validationSchemFilterSearch","Yup","address","nullable","notRequired","default","valuetext","value","initialValues","FilterOffer","listAddress","handelChange","React","setValue","t","useTranslation","formik","useFormik","validationSchema","onSubmit","values","isEmpty","Box","handleSubmit","List","sx","width","mb","component","subheader","ListSubheader","id","ListItem","my","FormControl","fullWidth","variant","Autocomplete","options","autoHighlight","onChange","e","setFieldValue","getOptionLabel","option","city","renderOption","propsRender","renderInput","params","TextField","label","inputProps","form","autocomplete","autoComplete","Typography","gutterBottom","Grid","container","spacing","alignItems","item","xs","Slider","getAriaLabel","event","newValue","console","log","valueLabelDisplay","getAriaValueText","color","LeftSearchClient","filterCallback","FB","XFBML","parse","window","error","style","className","RightSearch","map","key","ListItemButton","ListItemAvatar","Avatar","alt","src","ListItemText","primary","secondary","Divider","Card","CardContent","height","title","frameBorder","allow","allowFullScreen","Search","TypeDisplaySearchOffers","typeDisplayOffers","setTypeDisplayOffers","activePage","setActivePage","isSearchCalback","setIsSearchCalback","search","useLocation","navigate","useNavigate","dispatch","useDispatch","useSelector","allSessionSelector","currentUser","isAuthenticated","entitiesPublicOfferSelector","entitiesPublicOffer","totalItemsPublicOfferSelector","totalItemsPublicOffer","totalPagesPublicOfferSelector","totalPagesPublicOffer","loadingEntitiesPublicOfferSelector","loadingEntitiesPublicOffer","entitiesCategories","allCategorySelector","entities","entitiesAddress","allAddressSelector","listConnectedUsersWebsocketSelector","listConnectedUsersWebsocket","resetAll","resetPublicOffers","queryString","queryParams","getFullUrlWithParams","fetchPublicOffers","page","size","AllAppConfig","searchCalback","pathname","ALL_APP_ROUTES","URLSearchParams","toString","replace","px","md","pt","sm","Breadcrumbs","to","mt","display","slice","maxWidth","marginBottom","SearchAppBar","typeDisplayCallback","pageStart","loadMore","hasMore","loader","threshold","initialLoad","ItemsOffer","listOffers","typeDisplay","isOnLine","email","isUserOnline","LoadingSearchOffers","Alert","severity"],"sourceRoot":""}